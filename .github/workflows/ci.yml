name: Backend CI (API)

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_REF: ghcr.io/chatfleetoss/chatfleet-api

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Node setup (for Pact tests)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Pact tests
        run: |
          npm ci --no-audit --no-fund
          npm run pact:all
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REF }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Set IMAGE_TAG env
        run: echo "IMAGE_TAG=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_ENV
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
      - name: Trivy scan
        run: trivy image --severity HIGH,CRITICAL --ignore-unfixed --no-progress "$IMAGE_TAG"
        continue-on-error: true
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "detect --no-banner --exit-code 1"
        continue-on-error: true
      - name: SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_TAG }}
          artifact-name: sbom-api-spdx.json
        
        continue-on-error: true
  push-sign:
    needs: build-test-scan
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Login to GHCR with default token
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to GHCR with PAT (optional)
        env:
          REGISTRY: ${{ env.REGISTRY }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        run: |
          if [ -n "${GHCR_USERNAME}" ] && [ -n "${GHCR_PAT}" ]; then
            echo "Using PAT login for GHCR"
            echo "${GHCR_PAT}" | docker login "${REGISTRY}" -u "${GHCR_USERNAME}" --password-stdin
          else
            echo "No PAT provided; continuing with default token login"
          fi
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REF }}
          tags: |
            type=ref,event=tag
      - name: Build and push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.meta.outputs.tags }}
            ghcr.io/chatfleetoss/chatfleet-api:latest
          labels: ${{ steps.meta.outputs.labels }}
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
      - name: Cosign sign (keyless)
        run: cosign sign --yes ${{ env.IMAGE_REF }}:${{ github.ref_name }}

  provider-verify:
    name: Provider Verify (Pact)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval 10s --health-timeout 5s --health-retries 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install API deps
        working-directory: .
        run: |
          pip install --no-cache-dir -r requirements.txt

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Pact deps
        run: npm ci --no-audit --no-fund

      - name: Boot API and wait for health
        env:
          MONGO_URI: mongodb://localhost:27017/chatfleet
          AUTO_START_MONGO: "0"
          JWT_SECRET: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
          OPENAI_API_KEY: ""
        run: |
          nohup uvicorn main:app --host 0.0.0.0 --port 8000 --proxy-headers > api.log 2>&1 &
          for i in $(seq 1 60); do
            if curl -fsS http://localhost:8000/api/health >/dev/null 2>&1; then
              echo "API healthy"; break; fi; sleep 2; done
          curl -fsS http://localhost:8000/api/health

      - name: Verify provider pact
        run: npm run pact:provider

      - name: Upload API log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: provider-api-log
          path: api.log

  push-edge:
    needs: build-test-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to GHCR with default token
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to GHCR with PAT (optional)
        if: ${{ secrets.GHCR_PAT != '' && secrets.GHCR_USERNAME != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Docker metadata (edge)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REF }}
          tags: |
            type=raw,value=edge
      - name: Build and push (edge)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
